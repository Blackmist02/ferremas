{
    "info": {
        "name": "Ferremas API - Pruebas de Rendimiento COMPLETAS",
        "description": "Colecci√≥n optimizada basada en TODOS los endpoints disponibles en el proyecto",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "version": "3.0.0"
    },
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:8081",
            "type": "string"
        },
        {
            "key": "iterations",
            "value": "20",
            "type": "string"
        },
        {
            "key": "delay",
            "value": "50",
            "type": "string"
        }
    ],
    "auth": {
        "type": "noauth"
    },
    "item": [
        {
            "name": "üßπ Limpieza y Verificaci√≥n Inicial",
            "item": [
                {
                    "name": "Health Check - Sistema",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "console.log('üè• === HEALTH CHECK DEL SISTEMA ===');",
                                    "",
                                    "pm.test('Sistema Spring Boot responde', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                                    "    pm.expect([200, 204]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üè• Sistema: ${pm.response.code === 200 ? 'DISPONIBLE' : 'DISPONIBLE (sin productos)'}`);",
                                    "",
                                    "pm.globals.set('test_start_time', Date.now());"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/productos/producto?page=0&size=1",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "productos", "producto"],
                            "query": [
                                {"key": "page", "value": "0"},
                                {"key": "size", "value": "1"}
                            ]
                        }
                    }
                },
                {
                    "name": "Verificar Productos - Paginaci√≥n Real",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "console.log('üì¶ === VERIFICACI√ìN PRODUCTOS ===');",
                                    "",
                                    "pm.test('Endpoint productos responde', function () {",
                                    "    pm.expect([200, 204]).to.include(pm.response.code);",
                                    "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    let productos = [];",
                                    "    let total = 0;",
                                    "    ",
                                    "    if (response.content && Array.isArray(response.content)) {",
                                    "        productos = response.content;",
                                    "        total = response.totalElements || response.content.length;",
                                    "        console.log(`üìÑ Respuesta PAGINADA: ${productos.length} productos de ${total} totales`);",
                                    "        pm.globals.set('paginacion_disponible', 'true');",
                                    "    } else if (Array.isArray(response)) {",
                                    "        productos = response;",
                                    "        total = response.length;",
                                    "        console.log(`üìÑ Array SIMPLE: ${productos.length} productos totales`);",
                                    "        pm.globals.set('paginacion_disponible', 'false');",
                                    "    }",
                                    "    ",
                                    "    pm.globals.set('total_productos', total);",
                                    "    ",
                                    "    if (productos.length > 0) {",
                                    "        const producto = productos[0];",
                                    "        console.log('üîç Campos disponibles:', Object.keys(producto));",
                                    "        ",
                                    "        pm.test('Estructura de producto v√°lida', function () {",
                                    "            pm.expect(producto).to.have.property('id');",
                                    "            pm.expect(producto).to.have.property('nombre');",
                                    "            pm.expect(producto).to.have.property('codigo');",
                                    "            pm.expect(producto).to.have.property('stock');",
                                    "        });",
                                    "        ",
                                    "        pm.globals.set('producto_test_id', producto.id);",
                                    "        pm.globals.set('producto_test_codigo', producto.codigoProducto || producto.codigo_producto || producto.codigo);",
                                    "    }",
                                    "} else {",
                                    "    console.log('üì¶ Sin productos o endpoint no disponible');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Cache-Control",
                                "value": "no-cache"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/productos/producto?page=0&size=12",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "productos", "producto"],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "0"
                                },
                                {
                                    "key": "size",
                                    "value": "12"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "ÔøΩ Sistema y Limpieza",
            "item": [
                {
                    "name": "POST Limpieza Datos de Prueba",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Cleanup responde correctamente', function () {",
                                    "    pm.expect([200]).to.include(pm.response.code);",
                                    "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                                    "});",
                                    "",
                                    "console.log(`üßπ === CLEANUP SISTEMA ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "console.log('‚úÖ Usando endpoint de productos como simulaci√≥n de cleanup');"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/productos/producto?page=0&size=1",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "productos", "producto"],
                            "query": [
                                {"key": "page", "value": "0"},
                                {"key": "size", "value": "1"}
                            ]
                        }
                    }
                },
                {
                    "name": "GET Contar Datos de Prueba",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Count endpoint responde', function () {",
                                    "    pm.expect([200]).to.include(pm.response.code);",
                                    "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                                    "});",
                                    "",
                                    "console.log(`üìä === CONTEO DATOS PRUEBA ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log('‚úÖ Usando endpoint de productos como simulaci√≥n de conteo');"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/productos/producto?page=0&size=1",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "productos", "producto"],
                            "query": [
                                {"key": "page", "value": "0"},
                                {"key": "size", "value": "1"}
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "ÔøΩüöÄ Productos - Tests Completos",
            "item": [
                {
                    "name": "GET Productos - P√°gina 1",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('P√°gina 1 carga r√°pido', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(1500);",
                                    "    pm.expect(pm.response.code).to.eql(200);",
                                    "});",
                                    "",
                                    "const response = pm.response.json();",
                                    "let productos = Array.isArray(response) ? response : response.content || [];",
                                    "",
                                    "console.log(`üì¶ === PRODUCTOS P√ÅGINA 1 ===`);",
                                    "console.log(`üìä Productos cargados: ${productos.length}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "console.log(`üìè Tama√±o: ${Math.round(pm.response.responseSize/1024)}KB`);",
                                    "",
                                    "if (pm.response.responseTime > 1000) {",
                                    "    console.warn(`‚ö†Ô∏è LENTO para frontend: ${pm.response.responseTime}ms`);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/productos/producto?page=0&size=12",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "productos", "producto"],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "0"
                                },
                                {
                                    "key": "size",
                                    "value": "12"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "POST Crear Producto Masivo",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Creaci√≥n masiva eficiente', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                                    "    pm.expect([201, 400, 401, 403]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üì¶ === CREACI√ìN MASIVA ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const productos = pm.response.json();",
                                    "    if (Array.isArray(productos)) {",
                                    "        console.log(`‚úÖ ${productos.length} productos creados`);",
                                    "        let productosCreados = pm.globals.get('productos_test') || '[]';",
                                    "        productosCreados = JSON.parse(productosCreados);",
                                    "        productos.forEach(p => {",
                                    "            productosCreados.push({ id: p.id, codigo: p.codigo });",
                                    "        });",
                                    "        pm.globals.set('productos_test', JSON.stringify(productosCreados));",
                                    "    }",
                                    "} else if (pm.response.code === 401 || pm.response.code === 403) {",
                                    "    console.log('‚ö†Ô∏è Creaci√≥n masiva requiere autenticaci√≥n');",
                                    "} else {",
                                    "    console.log('‚ö†Ô∏è Error en creaci√≥n (c√≥digo duplicado esperado)');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const timestamp = Date.now();",
                                    "const random = Math.floor(Math.random() * 10000);",
                                    "const iterationNum = pm.info.iteration || 0;",
                                    "",
                                    "const productos = [];",
                                    "for (let i = 0; i < 3; i++) {",
                                    "    productos.push({",
                                    "        codigo: `PERF-${timestamp}-${random}-${i}`,",
                                    "        codigoProducto: `PROD-${timestamp}-${iterationNum}-${i}`,",
                                    "        nombre: `Producto Test Performance ${iterationNum}-${i}`,",
                                    "        marca: `MarcaTest${i}`,",
                                    "        modelo: `ModeloTest-${iterationNum}-${i}`,",
                                    "        stock: Math.floor(Math.random() * 100) + 10,",
                                    "        precios: [{",
                                    "            fecha: new Date().toISOString(),",
                                    "            valor: Math.floor(Math.random() * 50000) + 5000",
                                    "        }]",
                                    "    });",
                                    "}",
                                    "",
                                    "pm.variables.set('productos_bulk', JSON.stringify(productos));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{{productos_bulk}}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/productos/productos",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "productos", "productos"]
                        }
                    }
                },
                {
                    "name": "POST Reducir Stock - Concurrencia",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Reducci√≥n de stock concurrente', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                                    "    pm.expect([200, 400, 409]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üì¶ === REDUCIR STOCK CONCURRENTE ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.test('Stock reducido correctamente', function () {",
                                    "        pm.expect(response.success).to.be.true;",
                                    "    });",
                                    "    console.log('‚úÖ Stock reducido exitosamente');",
                                    "} else if (pm.response.code === 409) {",
                                    "    console.log('‚ö†Ô∏è Conflicto de concurrencia (esperado en tests paralelos)');",
                                    "} else {",
                                    "    console.log('‚ö†Ô∏è Stock insuficiente (esperado en tests concurrentes)');",
                                    "}",
                                    "",
                                    "if (pm.response.responseTime > 800) {",
                                    "    console.warn(`‚ö†Ô∏è LENTO para proceso de compra: ${pm.response.responseTime}ms`);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "[\n    {\n        \"id\": 1,\n        \"cantidad\": 1\n    }\n]"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/productos/reducir-stock",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "productos", "reducir-stock"]
                        }
                    }
                },
                {
                    "name": "GET Producto por ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Producto por ID carga r√°pido', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(800);",
                                    "    pm.expect([200, 404]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üì¶ === PRODUCTO POR ID ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const producto = pm.response.json();",
                                    "    pm.test('Producto v√°lido por ID', function () {",
                                    "        pm.expect(producto).to.have.property('id');",
                                    "        pm.expect(producto).to.have.property('nombre');",
                                    "        pm.expect(producto).to.have.property('stock');",
                                    "    });",
                                    "    console.log(`‚úÖ Producto encontrado: ${producto.nombre}`);",
                                    "} else {",
                                    "    console.log('‚ö†Ô∏è Producto no encontrado (normal en algunas pruebas)');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/productos/1",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "productos", "1"]
                        }
                    }
                },
                {
                    "name": "GET Producto por C√≥digo",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('B√∫squeda por c√≥digo r√°pida', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(800);",
                                    "    pm.expect([200, 404]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üîç === B√öSQUEDA POR C√ìDIGO ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const producto = pm.response.json();",
                                    "    pm.test('Producto v√°lido por c√≥digo', function () {",
                                    "        pm.expect(producto).to.have.property('codigo');",
                                    "        pm.expect(producto).to.have.property('nombre');",
                                    "    });",
                                    "    console.log(`‚úÖ Producto encontrado por c√≥digo: ${producto.nombre}`);",
                                    "} else {",
                                    "    console.log('‚ö†Ô∏è C√≥digo de producto no encontrado');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/productos/codigo/001",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "productos", "codigo", "001"]
                        }
                    }
                },
                {
                    "name": "POST Restaurar Stock",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Restauraci√≥n de stock r√°pida', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                                    "    pm.expect([200, 400]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üîÑ === RESTAURAR STOCK ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.test('Stock restaurado exitosamente', function () {",
                                    "        pm.expect(response.success).to.be.true;",
                                    "        pm.expect(response.mensaje).to.be.a('string');",
                                    "    });",
                                    "    console.log('‚úÖ Stock restaurado correctamente');",
                                    "} else {",
                                    "    console.log('‚ö†Ô∏è Error en restauraci√≥n de stock');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "[\n    {\n        \"id\": 1,\n        \"cantidad\": 1\n    }\n]"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/productos/restaurar-stock",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "productos", "restaurar-stock"]
                        }
                    }
                }
            ]
        },
        {
            "name": "üë• Usuarios - Sistema Completo",
            "item": [
                {
                    "name": "POST Registro Usuario Completo",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Registro r√°pido y seguro', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(1500);",
                                    "    pm.expect([200, 400]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üë§ === REGISTRO USUARIO ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.test('Usuario registrado con datos completos', function () {",
                                    "        pm.expect(response.success).to.be.true;",
                                    "        pm.expect(response.usuario).to.have.property('id');",
                                    "        pm.expect(response.usuario).to.have.property('nombre');",
                                    "        pm.expect(response.usuario).to.have.property('correo');",
                                    "        pm.expect(response.usuario).to.have.property('rol');",
                                    "    });",
                                    "    console.log(`‚úÖ Usuario ${response.usuario.id} registrado`);",
                                    "} else {",
                                    "    console.log('‚ö†Ô∏è Error en registro (correo duplicado esperado)');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const timestamp = Date.now();",
                                    "const random = Math.floor(Math.random() * 10000);",
                                    "const iterationNum2 = pm.info.iteration || 0;",
                                    "",
                                    "const uniqueCorreo = `test-${timestamp}-${random}@ferremas-test.com`;",
                                    "const uniqueNombre = `Usuario${iterationNum2}`;",
                                    "const uniqueApellido = `TestApellido${iterationNum2}`;",
                                    "",
                                    "const runBase = Math.floor(Math.random() * 99999999);",
                                    "const runDv = Math.floor(Math.random() * 9);",
                                    "const uniqueRun = `${runBase}-${runDv}`;",
                                    "",
                                    "pm.variables.set('unique_correo', uniqueCorreo);",
                                    "pm.variables.set('unique_nombre', uniqueNombre);",
                                    "pm.variables.set('unique_apellido', uniqueApellido);",
                                    "pm.variables.set('unique_run', uniqueRun);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"nombre\": \"{{unique_nombre}}\",\n    \"email\": \"{{unique_correo}}\",\n    \"password\": \"test123456\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/usuarios/registro",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "usuarios", "registro"]
                        }
                    }
                },
                {
                    "name": "POST Login Usuario Existente",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Login ultra r√°pido', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(800);",
                                    "    pm.expect([200, 400, 401]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üîê === LOGIN USUARIO ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.test('Login exitoso con sesi√≥n', function () {",
                                    "        pm.expect(response.success).to.be.true;",
                                    "        pm.expect(response.usuario).to.have.property('correo');",
                                    "        pm.expect(response.usuario).to.have.property('rol');",
                                    "    });",
                                    "    console.log('‚úÖ Login exitoso - Sesi√≥n iniciada');",
                                    "} else {",
                                    "    console.log('‚ö†Ô∏è Login fallido (credenciales incorrectas)');",
                                    "}",
                                    "",
                                    "if (pm.response.responseTime > 600) {",
                                    "    console.warn(`‚ö†Ô∏è LENTO para experiencia de usuario: ${pm.response.responseTime}ms`);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"admin@ferremas.com\",\n    \"password\": \"admin\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/usuarios/login",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "usuarios", "login"]
                        }
                    }
                },
                {
                    "name": "GET Listar Usuarios",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Listado de usuarios r√°pido', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(1500);",
                                    "    pm.expect([200, 204, 401, 403]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üë• === LISTAR USUARIOS ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const usuarios = pm.response.json();",
                                    "    pm.test('Usuarios v√°lidos', function () {",
                                    "        pm.expect(usuarios).to.be.an('array');",
                                    "        if (usuarios.length > 0) {",
                                    "            pm.expect(usuarios[0]).to.have.property('id');",
                                    "            pm.expect(usuarios[0]).to.have.property('nombre');",
                                    "        }",
                                    "    });",
                                    "    console.log(`üë• Total usuarios: ${usuarios.length}`);",
                                    "} else if (pm.response.code === 401 || pm.response.code === 403) {",
                                    "    console.log('‚ö†Ô∏è Listado de usuarios requiere autenticaci√≥n v√°lida');",
                                    "} else {",
                                    "    console.log('üì≠ Sin usuarios disponibles');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "auth": {
                            "type": "basic",
                            "basic": [
                                {
                                    "key": "username",
                                    "value": "admin",
                                    "type": "string"
                                },
                                {
                                    "key": "password",
                                    "value": "admin",
                                    "type": "string"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/usuarios/usuario",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "usuarios", "usuario"]
                        }
                    }
                }
            ]
        },
        {
            "name": "üí± Divisas - API Externa",
            "item": [
                {
                    "name": "GET Tasas Principales",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Divisas en tiempo aceptable', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(8000);",
                                    "    pm.expect([200, 500]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üí± === TASAS DIVISAS ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.test('Contiene divisas principales', function () {",
                                    "        pm.expect(response).to.have.property('CLP');",
                                    "        pm.expect(response.CLP).to.eql(1);",
                                    "        pm.expect(response).to.have.property('USD');",
                                    "        pm.expect(response).to.have.property('EUR');",
                                    "    });",
                                    "    ",
                                    "    console.log(`üíµ USD: ${response.USD}`);",
                                    "    console.log(`üí∂ EUR: ${response.EUR}`);",
                                    "    console.log('‚úÖ Tasas de cambio obtenidas');",
                                    "} else if (pm.response.code === 500) {",
                                    "    console.log('‚ö†Ô∏è API Banco Central no disponible - usando valores fallback');",
                                    "}",
                                    "",
                                    "if (pm.response.responseTime > 5000) {",
                                    "    console.warn(`‚ö†Ô∏è Banco Central LENTO: ${pm.response.responseTime}ms`);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/divisas/tasas",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "divisas", "tasas"]
                        }
                    }
                },
                {
                    "name": "GET Divisas Principales",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Divisas principales en tiempo aceptable', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(8000);",
                                    "    pm.expect([200, 204, 500]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üí± === DIVISAS PRINCIPALES ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const divisas = pm.response.json();",
                                    "    pm.test('Divisas v√°lidas', function () {",
                                    "        pm.expect(divisas).to.be.an('array');",
                                    "        if (divisas.length > 0) {",
                                    "            pm.expect(divisas[0]).to.have.property('codigo');",
                                    "            pm.expect(divisas[0]).to.have.property('valor');",
                                    "        }",
                                    "    });",
                                    "    console.log(`üí± Divisas obtenidas: ${divisas.length}`);",
                                    "} else if (pm.response.code === 500) {",
                                    "    console.log('‚ö†Ô∏è API Banco Central no disponible');",
                                    "} else {",
                                    "    console.log('üì≠ Sin divisas disponibles');",
                                    "}",
                                    "",
                                    "if (pm.response.responseTime > 5000) {",
                                    "    console.warn(`‚ö†Ô∏è Banco Central MUY LENTO: ${pm.response.responseTime}ms`);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/divisas/principales",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "divisas", "principales"]
                        }
                    }
                }
            ]
        },
        {
            "name": "üí≥ Webpay - Sistema de Pagos",
            "item": [
                {
                    "name": "POST Crear Transacci√≥n",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Webpay responde en tiempo razonable', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(8000);",
                                    "    pm.expect([200, 500, 502]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üí≥ === WEBPAY CREATE ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.test('Transacci√≥n Webpay v√°lida', function () {",
                                    "        pm.expect(response).to.have.property('token');",
                                    "        pm.expect(response).to.have.property('url');",
                                    "        pm.expect(response.token).to.be.a('string');",
                                    "        pm.expect(response.url).to.include('webpay');",
                                    "    });",
                                    "    console.log('‚úÖ Transacci√≥n creada - Token generado');",
                                    "} else {",
                                    "    console.log('‚ö†Ô∏è Webpay no disponible (sandbox/configuraci√≥n)');",
                                    "}",
                                    "",
                                    "if (pm.response.responseTime > 5000) {",
                                    "    console.warn(`‚ö†Ô∏è Webpay MUY LENTO: ${pm.response.responseTime}ms`);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const montosComunes = [5990, 12500, 25000, 48990, 75000, 125000];",
                                    "const monto = montosComunes[Math.floor(Math.random() * montosComunes.length)];",
                                    "pm.variables.set('monto_pago', monto);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"amount\": {{monto_pago}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/webpay/create",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "webpay", "create"]
                        }
                    }
                }
            ]
        },
        {
            "name": "üìã Boletas - Sistema de Facturaci√≥n",
            "item": [
                {
                    "name": "GET Listar Boletas",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Boletas cargan r√°pido', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(1500);",
                                    "    pm.expect([200, 204, 401, 403]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üìã === BOLETAS ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const boletas = pm.response.json();",
                                    "    pm.test('Boletas v√°lidas', function () {",
                                    "        pm.expect(boletas).to.be.an('array');",
                                    "        if (boletas.length > 0) {",
                                    "            pm.expect(boletas[0]).to.have.property('id');",
                                    "        }",
                                    "    });",
                                    "    console.log(`üìã Total boletas: ${boletas.length}`);",
                                    "} else if (pm.response.code === 401 || pm.response.code === 403) {",
                                    "    console.log('‚ö†Ô∏è Listado de boletas requiere autenticaci√≥n v√°lida');",
                                    "} else {",
                                    "    console.log('üì≠ Sin boletas disponibles');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "auth": {
                            "type": "basic",
                            "basic": [
                                {
                                    "key": "username",
                                    "value": "admin",
                                    "type": "string"
                                },
                                {
                                    "key": "password",
                                    "value": "admin",
                                    "type": "string"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/boleta/boleta",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "boleta", "boleta"]
                        }
                    }
                },
                {
                    "name": "POST Crear Boleta",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Creaci√≥n de boleta r√°pida', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                                    "    pm.expect([201, 400, 401, 403]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üìã === CREAR BOLETA ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const boleta = pm.response.json();",
                                    "    pm.test('Boleta creada correctamente', function () {",
                                    "        pm.expect(boleta).to.have.property('id');",
                                    "    });",
                                    "    console.log('‚úÖ Boleta creada exitosamente');",
                                    "} else if (pm.response.code === 401 || pm.response.code === 403) {",
                                    "    console.log('‚ö†Ô∏è Creaci√≥n de boleta requiere autenticaci√≥n v√°lida');",
                                    "} else {",
                                    "    console.log('‚ö†Ô∏è Error en creaci√≥n de boleta (campos requeridos)');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"fecha\": \"2025-07-01\",\n    \"total\": 25990.0,\n    \"cliente\": \"Cliente Test\",\n    \"token\": \"test-token-123\"\n}"
                        },
                        "auth": {
                            "type": "basic",
                            "basic": [
                                {
                                    "key": "username",
                                    "value": "admin",
                                    "type": "string"
                                },
                                {
                                    "key": "password",
                                    "value": "admin",
                                    "type": "string"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/boleta/boletas",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "boleta", "boletas"]
                        }
                    }
                }
            ]
        },
        {
            "name": "üè¢ Sucursales",
            "item": [
                {
                    "name": "GET Listar Sucursales",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Sucursales cargan r√°pido', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(800);",
                                    "    pm.expect([200, 204, 401, 403, 404, 500]).to.include(pm.response.code);",
                                    "});",
                                    "",
                                    "console.log(`üè¢ === SUCURSALES ===`);",
                                    "console.log(`üìä Status: ${pm.response.code}`);",
                                    "console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const sucursales = pm.response.json();",
                                    "    pm.test('Sucursales v√°lidas', function () {",
                                    "        pm.expect(sucursales).to.be.an('array');",
                                    "        if (sucursales.length > 0) {",
                                    "            pm.expect(sucursales[0]).to.have.property('nombre');",
                                    "            pm.expect(sucursales[0]).to.have.property('direccion');",
                                    "        }",
                                    "    });",
                                    "    console.log(`üè¢ Total sucursales: ${sucursales.length}`);",
                                    "} else if (pm.response.code === 401 || pm.response.code === 403) {",
                                    "    console.log('‚ö†Ô∏è Sucursales requieren autenticaci√≥n');",
                                    "} else if (pm.response.code === 404) {",
                                    "    console.log('‚ùå Endpoint de sucursales no implementado (esperado)');",
                                    "} else if (pm.response.code === 500) {",
                                    "    console.log('‚ö†Ô∏è Error interno en sucursales (normal si no hay datos)');",
                                    "} else {",
                                    "    console.log('üì≠ Sin sucursales configuradas');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/sucursales",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "sucursales"]
                        }
                    }
                }
            ]
        },
        {
            "name": "üìä Reporte Final Completo",
            "item": [
                {
                    "name": "M√©tricas Finales del Sistema",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "console.log('üìä === REPORTE FINAL FERREMAS ===');",
                                    "",
                                    "const testStartTime = pm.globals.get('test_start_time');",
                                    "const testDuration = testStartTime ? Date.now() - parseInt(testStartTime) : 0;",
                                    "const iterationNum3 = pm.info.iteration || 0;",
                                    "const responseTimeMs = pm.response.responseTime;",
                                    "",
                                    "console.log(`üîÑ Iteraci√≥n completada: ${iterationNum3 + 1}`);",
                                    "console.log(`‚è±Ô∏è Duraci√≥n total del test: ${Math.round(testDuration/1000)}s`);",
                                    "console.log(`üì° √öltimo endpoint: ${responseTimeMs}ms`);",
                                    "",
                                    "const productosTest = pm.globals.get('productos_test');",
                                    "const totalProductos = pm.globals.get('total_productos');",
                                    "const paginacionDisponible = pm.globals.get('paginacion_disponible');",
                                    "",
                                    "console.log('üìä === ESTAD√çSTICAS DEL SISTEMA ===');",
                                    "console.log(`üì¶ Productos en sistema: ${totalProductos || 'N/A'}`);",
                                    "console.log(`üìÑ Paginaci√≥n implementada: ${paginacionDisponible === 'true' ? 'S√ç' : 'NO'}`);",
                                    "",
                                    "if (productosTest) {",
                                    "    const productos = JSON.parse(productosTest);",
                                    "    console.log(`üß™ Productos de prueba creados: ${productos.length}`);",
                                    "}",
                                    "",
                                    "console.log('üèÜ === EVALUACI√ìN DE RENDIMIENTO ===');",
                                    "if (responseTime < 200) {",
                                    "    console.log('üöÄ EXCELENTE: Sistema muy optimizado');",
                                    "} else if (responseTime < 500) {",
                                    "    console.log('‚úÖ BUENO: Rendimiento aceptable para producci√≥n');",
                                    "} else if (responseTime < 1000) {",
                                    "    console.log('‚ö†Ô∏è REGULAR: Puede beneficiarse de optimizaciones');",
                                    "} else if (responseTime < 2000) {",
                                    "    console.log('üêå LENTO: Requiere optimizaci√≥n urgente');",
                                    "} else {",
                                    "    console.log('‚ùå MUY LENTO: Sistema necesita refactoring');",
                                    "}",
                                    "",
                                    "console.log('üí° === RECOMENDACIONES ===');",
                                    "if (paginacionDisponible === 'true') {",
                                    "    console.log('‚úÖ Paginaci√≥n: Implementada correctamente');",
                                    "} else {",
                                    "    console.log('‚ö†Ô∏è Paginaci√≥n: Implementar para mejorar rendimiento');",
                                    "}",
                                    "",
                                    "if (totalProductos && parseInt(totalProductos) > 100) {",
                                    "    console.log('üí° Sugerencia: Implementar cache en frontend');",
                                    "}",
                                    "",
                                    "pm.test('Sistema Ferremas funcional', function () {",
                                    "    pm.expect(pm.response.code).to.eql(200);",
                                    "    pm.expect(testDuration).to.be.below(300000);",
                                    "});",
                                    "",
                                    "console.log('‚úÖ === PRUEBAS FERREMAS COMPLETADAS ===');"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/productos/producto?page=0&size=1",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "productos", "producto"],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "0"
                                },
                                {
                                    "key": "size",
                                    "value": "1"
                                }
                            ]
                        }
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "pm.request.headers.add({",
                    "    key: 'X-Test-ID',",
                    "    value: `ferremas-test-${Date.now()}`",
                    "});",
                    "",
                    "pm.request.headers.add({",
                    "    key: 'X-Test-Iteration',",
                    "    value: `${pm.info.iteration || 0}`",
                    "});",
                    "",                "const requestName = pm.info.requestName;",
                "const iterationNum4 = pm.info.iteration;",
                "",
                "console.log(`üöÄ [${iterationNum4}] Ejecutando: ${requestName}`);"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "const responseTimeMs2 = pm.response.responseTime;",
                    "const responseSize = pm.response.responseSize;",
                    "const statusCode = pm.response.code;",
                    "const requestName = pm.info.requestName;",
                    "",                "pm.test('‚úÖ Sistema responde en tiempo razonable', function () {",
                "    pm.expect(responseTimeMs2).to.be.below(15000);",
                "});",
                    "",
                    "pm.test('‚úÖ Response size no excesivo', function () {",
                    "    pm.expect(responseSize).to.be.below(15000000);",
                    "});",
                    "",
                    "if (requestName.includes('Producto') && responseTime > 1500) {",
                    "    console.warn(`‚ö†Ô∏è PRODUCTOS LENTO: ${responseTime}ms - Afecta UX`);",
                    "} else if (requestName.includes('Usuario') && responseTime > 1000) {",
                    "    console.warn(`‚ö†Ô∏è USUARIOS LENTO: ${responseTime}ms - Afecta login`);",
                    "} else if (requestName.includes('Divisas') && responseTime > 4000) {",
                    "    console.warn(`‚ö†Ô∏è DIVISAS MUY LENTO: ${responseTime}ms - API externa`);",
                    "} else if (requestName.includes('Webpay') && responseTime > 6000) {",
                    "    console.warn(`‚ö†Ô∏è WEBPAY MUY LENTO: ${responseTime}ms - Revisar configuraci√≥n`);",
                    "}",
                    "",
                    "if (statusCode >= 500) {",
                    "    console.error(`üö® ERROR CR√çTICO: ${statusCode} en ${requestName}`);",
                    "} else if (statusCode >= 400 && statusCode < 500 && !requestName.includes('Test')) {",
                    "    console.warn(`‚ö†Ô∏è Error cliente: ${statusCode} en ${requestName}`);",
                    "}",
                    "",
                    "const sizeKB = Math.round(responseSize / 1024);",
                    "console.log(`‚úÖ ${requestName}: ${statusCode} (${responseTime}ms, ${sizeKB}KB)`);"
                ]
            }
        }
    ]
}